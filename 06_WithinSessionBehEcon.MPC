\Operant Sensation Seeking FR1 V1
\Right Active
\Written by Zahra Farahbakhsh 6/22/2021

\Output
^Clicker = 1
^Tone1 = 9 \white,red,black
^Tone2 = 10 \green
^Tone3 = 11 \blue
^Tone4 = 12 \orange
^Light = 13
^Pump = 14
^Fan = 16

\Inputs
^ActiveLever = 1
^InactiveLever = 2
^Lick = 3

\A-Z Variables

\Total session counters
DIM C = 10
\C(0) = Nothing should always be zero
\C(1) = Active Lever
\C(2) = Inactive Lever
\C(3) = Total Reinforcers
\C(4) = Active ITI Lever
\C(5) = Inactive ITI Lever
\C(6) = Total Pump On
\C(7) = Total Pump Off
\C(8) = Reinforcer off counter
\C(9) = During reinforcer period

\Tone Tracking
\R= Click On/Off Tracker

\Behavioral economics variables
LIST A = 4.39", 2.55", 1.42", 0.79", 0.44", 0.25", 0.14", 0.08", 0.04" \Pump Durations
\B = Pump duration from LIST A (unit price)

DIM D = 9 \reinforcers/active levers per bin
\D(0) = 4.39
\D(1) = 2.55
\D(2) = 1.42
\D(3) = 0.79
\D(4) = 0.44
\D(5) = 0.25
\D(6) = 0.14
\D(7) = 0.08
\D(8) = 0.04

DIM Y = 9 \active lever presses per bin
\Y(0) = 4.39
\Y(1) = 2.55
\Y(2) = 1.42
\Y(3) = 0.79
\Y(4) = 0.44
\Y(5) = 0.25
\Y(6) = 0.14
\Y(7) = 0.08
\Y(8) = 0.04

\Bin Trackers
\E = Reinforcer per bin counter
\F = Bin timer (40min)
\X = Bin completed (bin number)

\Timestamps
SEALED_ARRAY G = 2000     \Active Lever
SEALED_ARRAY H = 2000     \Inactive Lever
SEALED_ARRAY I = 2000     \Reinforcer (Pump) Onset
SEALED_ARRAY J = 2000     \Reinforcer (Pump) Offset
SEALED_ARRAY K = 2000     \Active ITI Lever
SEALED_ARRAY L = 2000     \Inactive ITI Lever
SEALED_ARRAY U = 10000    \Bin Start
SEALED_ARRAY W = 10000    \Bin End

\T = Session Timer

S.S.1, \give reinforcers for correct response
S1,
    #START: ON ^FAN; SET C(9) = 0, R = 0; ---> S2
S2,
    \On active lever press, timestamp + add active, add active and update bin, set reinforcer on period, pulse pump on for current duration + active "click"
    #R^ActiveLever: SET G(C(1)) = T; ADD C(1); ADD S; SET Y(X) = S; Z2; Z3; ---> S3
    #R^InactiveLever: SET H(C(2)) = T; ADD C(2) ---> SX
S3,
    #R^ActiveLever: SET K(C(4)) = T; ADD C(4); Z3 ---> SX
    #R^InactiveLever: SET L(C(5)) = T; ADD C(5) ---> SX
    #Z1: SET C(9) = 0; SET J(C(8)) = T; ADD C(8);---> S2 \turn off reinforcer period


S.S.2,
S1,
    #START: ---> S2
S2, \start pump
    \On Z pulse from active, turn pump light and tones on, timestamp + add pump ON, add pump on and update bin
    #Z2: ON ^Pump; ON ^Light; ON ^Tone1; ON ^Tone2; ON ^Tone4; SET I(C(3)) = T; ADD C(3); ADD C(6); ADD E; SET D(X) = E; SET C(9) = 1 ---> S3
S3, \end pump after bin specified duration
    \On current bin time turn off pump tone and light, send Z1 to end reinforcer period and return to "trial" period, timestamp and add pump off
    B#T: OFF ^Pump, ^Light, ^Tone1, ^Tone2, ^Tone4; Z1; SET J(C(7)) = T; ADD C(7); SET C(9) = 0 ---> S2



S.S.3,
S1,
  #START: ---> S2

S2,
  \Set current pump time to duration in bin list, timestamp start of bin
  0.001": SET B = A(X); SET B = B*1; SET U(X) = T ---> S3

S3,
  \After 40 minutes, update bin active and reinforcer counters, timestamp end of bin, add bin finished counter
  40': SET D(X) = E, Y(X) = S, W(X) = T; ADD X ---> S4

S4,
  0.001": SET B = A(X); SET B = B*1; SET S = 0; SET E = 0 ---> S2


S.S.4,
S1,
    #START: ---> S2
S2,
     .001": SET T = T + .001; SHOW 1, Active, C(1), 2, Inactive, C(2), 3, Reinforcers, C(3), 4, Active ITI, C(4), 5, Inactive ITI, C(5), 7, Deliveries, C(6), 8, Timer, T, 9, Reinforcer Period, C(9), 10, Pump Duration, B, 11, Bins Completed, X, 12, Pokes/Bin, S, 13, Rein/Bin, E ---> SX


S.S.5,
S1,
    #START: ---> S2
S2,
    .001": IF T > 21600 [@End, @Continue]
        @End: IF C(9) = 1 [@ReinOn, @ReinOff]
            @ReinOn: ---> S2
            @ReinOff: ---> STOPSAVE
        @Continue: ---> S2

\STATE SET 7: z-pulse for active lever clicker
S.S.6,
S1,    \use state set at the start of the program
       #Z3: IF R = 0 [@Yes, @No]
                @Yes: ON ^Clicker; SET R = 1 ---> SX
                @No: OFF ^Clicker; SET R = 0 ---> SX















